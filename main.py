import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Configurar estilo de gr√°ficos
plt.style.use('default')
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['figure.figsize'] = (12, 8)

# =============================================================================
# 1. CARGA Y CONTEXTUALIZACI√ìN DEL DATASET
# =============================================================================
print("=" * 80)
print("AN√ÅLISIS EXPLORATORIO DE DATOS - INDICADORES MACROECON√ìMICOS MUNDIALES")
print("=" * 80)

# Cargar el dataset
df = pd.read_csv('world_bank_data_2025.csv')

# Contextualizaci√≥n del dataset
print("\n1. CONTEXTUALIZACI√ìN DEL DATASET")
print("-" * 40)
print("Este dataset contiene indicadores macroecon√≥micos de diversos pa√≠ses")
print("a lo largo de varios a√±os. Los datos provienen del Banco Mundial y")
print("otras fuentes internacionales, proporcionando una visi√≥n completa")
print("del desempe√±o econ√≥mico global.")

# Motivaci√≥n para la selecci√≥n del dataset
print("\nMOTIVACI√ìN:")
print("- Los indicadores macroecon√≥micos son fundamentales para entender")
print("  el desarrollo econ√≥mico de los pa√≠ses")
print("- Permite analizar relaciones entre diferentes variables econ√≥micas")
print("- Ofrece oportunidades para estudiar crisis econ√≥micas y recuperaciones")
print("- Los datos son relevantes para pol√≠ticas econ√≥micas y decisiones de inversi√≥n")

# Exploraci√≥n inicial
print(f"\nüìä DIMENSIONES DEL DATASET: {df.shape}")
print(f"üìÖ RANGO TEMPORAL: {df['year'].min()} - {df['year'].max()}")
print(f"üåç PA√çSES INCLUIDOS: {df['country_name'].nunique()}")

# =============================================================================
# 2. LIMPIEZA Y PREPARACI√ìN DE DATOS
# =============================================================================
print("\n\n2. LIMPIEZA Y PREPARACI√ìN DE DATOS")
print("-" * 40)

# 2.1. Identificaci√≥n de valores faltantes
print("2.1. VALORES FALTANTES POR VARIABLE:")
print("-" * 35)

null_info = pd.DataFrame({
    'Valores_Nulos': df.isnull().sum(),
    'Porcentaje_Nulos': (df.isnull().sum() / len(df)) * 100
})
print(null_info[null_info['Valores_Nulos'] > 0])

# 2.2. Imputaci√≥n de valores faltantes
print("\n2.2. IMPUTACI√ìN DE VALORES FALTANTES:")
print("-" * 35)

# Definir variables econ√≥micas
economic_cols = [
    'Inflation (CPI %)', 'GDP (Current USD)', 'GDP per Capita (Current USD)',
    'Unemployment Rate (%)', 'Interest Rate (Real, %)', 'Inflation (GDP Deflator, %)',
    'GDP Growth (% Annual)', 'Current Account Balance (% GDP)',
    'Government Expense (% of GDP)', 'Government Revenue (% of GDP)',
    'Tax Revenue (% of GDP)', 'Gross National Income (USD)', 'Public Debt (% of GDP)'
]

# Imputar valores faltantes usando la mediana por pa√≠s
for col in economic_cols:
    if col in df.columns and df[col].isnull().sum() > 0:
        initial_nulls = df[col].isnull().sum()
        df[col] = df.groupby('country_name')[col].transform(
            lambda x: x.fillna(x.median() if not np.isnan(x.median()) else df[col].median())
        )
        final_nulls = df[col].isnull().sum()
        print(f"‚úÖ {col}: {initial_nulls} ‚Üí {final_nulls} valores nulos")

# 2.3. Manejo de variables categ√≥ricas
print("\n2.3. VARIABLES CATEG√ìRICAS:")
print("-" * 25)

categorical_cols = ['country_name', 'country_id']
for col in categorical_cols:
    if col in df.columns:
        print(f"{col}: {df[col].nunique()} categor√≠as √∫nicas")
        if df[col].isnull().sum() > 0:
            df[col] = df[col].fillna('Unknown')
            print(f"‚úÖ {col}: Valores nulos imputados")

# 2.4. Detecci√≥n de valores at√≠picos y errores
print("\n2.4. DETECCI√ìN DE VALORES AT√çPICOS:")
print("-" * 30)

# Verificar rangos esperados para variables econ√≥micas
if 'Unemployment Rate (%)' in df.columns:
    unusual_unemployment = df[(df['Unemployment Rate (%)'] < 0) | (df['Unemployment Rate (%)'] > 50)]
    print(f"Tasa de desempleo inusual: {len(unusual_unemployment)} registros")

if 'Inflation (CPI %)' in df.columns:
    unusual_inflation = df[(df['Inflation (CPI %)'] < -10) | (df['Inflation (CPI %)'] > 1000)]
    print(f"Inflaci√≥n inusual: {len(unusual_inflation)} registros")

if 'GDP Growth (% Annual)' in df.columns:
    unusual_growth = df[(df['GDP Growth (% Annual)'] < -20) | (df['GDP Growth (% Annual)'] > 50)]
    print(f"Crecimiento econ√≥mico inusual: {len(unusual_growth)} registros")

# =============================================================================
# 3. AN√ÅLISIS EXPLORATORIO DE DATOS
# =============================================================================
print("\n\n3. AN√ÅLISIS EXPLORATORIO DE DATOS")
print("-" * 35)

# 3.1. Tipos de variables y estructura del dataset
print("3.1. ESTRUCTURA DEL DATASET:")
print("-" * 25)
print(df.info())

# 3.2. Estad√≠sticas descriptivas
print("\n3.2. ESTAD√çSTICAS DESCRIPTIVAS:")
print("-" * 30)

numeric_cols = df.select_dtypes(include=[np.number]).columns
print(df[numeric_cols].describe())

# 3.3. An√°lisis por pa√≠ses
print("\n3.3. AN√ÅLISIS POR PA√çSES:")
print("-" * 20)

if 'GDP (Current USD)' in df.columns:
    top_countries_gdp = df.groupby('country_name')['GDP (Current USD)'].mean().sort_values(ascending=False).head(10)
    print("TOP 10 PA√çSES POR PIB PROMEDIO:")
    for i, (country, gdp) in enumerate(top_countries_gdp.items(), 1):
        print(f"{i}. {country}: ${gdp:,.2f}")

if 'GDP Growth (% Annual)' in df.columns:
    top_growth = df.groupby('country_name')['GDP Growth (% Annual)'].mean().sort_values(ascending=False).head(10)
    print("\nTOP 10 PA√çSES POR CRECIMIENTO PROMEDIO:")
    for i, (country, growth) in enumerate(top_growth.items(), 1):
        print(f"{i}. {country}: {growth:.2f}%")


# =============================================================================
# 4. VISUALIZACIONES
# =============================================================================
print("\n\n4. VISUALIZACIONES")
print("-" * 15)

# Configuraci√≥n de visualizaciones
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']

# 4.1. Evoluci√≥n temporal del PIB mundial
if 'year' in df.columns and 'GDP (Current USD)' in df.columns:
    yearly_gdp = df.groupby('year')['GDP (Current USD)'].mean()
    axes[0, 0].plot(yearly_gdp.index, yearly_gdp.values, marker='o', linewidth=2, color=colors[0])
    axes[0, 0].set_title('Evoluci√≥n del PIB Mundial Promedio', fontweight='bold')
    axes[0, 0].set_xlabel('A√±o')
    axes[0, 0].set_ylabel('PIB Promedio (USD)')
    axes[0, 0].grid(True, alpha=0.3)
    axes[0, 0].ticklabel_format(style='plain', axis='y')

# 4.2. Top 10 pa√≠ses por PIB
if 'country_name' in df.columns and 'GDP (Current USD)' in df.columns:
    top_10_countries_gdp = df.groupby('country_name')['GDP (Current USD)'].mean().nlargest(10)
    bars = axes[0, 1].barh(range(len(top_10_countries_gdp)), top_10_countries_gdp.values, color=colors)
    axes[0, 1].set_yticks(range(len(top_10_countries_gdp)))
    axes[0, 1].set_yticklabels(top_10_countries_gdp.index)
    axes[0, 1].set_title('Top 10 Pa√≠ses por PIB Promedio', fontweight='bold')
    axes[0, 1].set_xlabel('PIB Promedio (USD)')
    axes[0, 1].ticklabel_format(style='plain', axis='x')

# 4.3. Relaci√≥n entre PIB per c√°pita y desempleo
if 'GDP per Capita (Current USD)' in df.columns and 'Unemployment Rate (%)' in df.columns:
    sample_df = df.sample(min(1000, len(df)))
    scatter = axes[1, 0].scatter(sample_df['GDP per Capita (Current USD)'], 
                                sample_df['Unemployment Rate (%)'], 
                                alpha=0.6, color=colors[2], s=30)
    axes[1, 0].set_xlabel('PIB per C√°pita (USD)')
    axes[1, 0].set_ylabel('Tasa de Desempleo (%)')
    axes[1, 0].set_title('Relaci√≥n PIB per C√°pita vs Desempleo', fontweight='bold')
    axes[1, 0].set_xscale('log')

# 4.4. Distribuci√≥n del crecimiento econ√≥mico
if 'GDP Growth (% Annual)' in df.columns:
    growth_data = df['GDP Growth (% Annual)'].dropna()
    axes[1, 1].hist(growth_data, bins=30, alpha=0.7, color=colors[3], edgecolor='black')
    axes[1, 1].axvline(x=growth_data.mean(), color='red', linestyle='--', linewidth=2, label=f'Media: {growth_data.mean():.2f}%')
    axes[1, 1].set_xlabel('Crecimiento del PIB (% Anual)')
    axes[1, 1].set_ylabel('Frecuencia')
    axes[1, 1].set_title('Distribuci√≥n del Crecimiento Econ√≥mico', fontweight='bold')
    axes[1, 1].legend()
    axes[1, 1].grid(True, alpha=0.3)

plt.suptitle('An√°lisis Exploratorio - Indicadores Macroecon√≥micos Mundiales', 
             fontsize=16, fontweight='bold')
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

# 4.5. Matriz de correlaci√≥n
print("\n4.5. MATRIZ DE CORRELACI√ìN ENTRE VARIABLES ECON√ìMICAS:")
print("-" * 55)

if len(numeric_cols) > 1:
    # Seleccionar variables econ√≥micas principales
    economic_cols_for_corr = [col for col in economic_cols if col in df.columns][:8]  # Limitar a 8 variables
    
    if len(economic_cols_for_corr) > 1:
        correlation_matrix = df[economic_cols_for_corr].corr()
        
        # Crear heatmap de correlaci√≥n
        plt.figure(figsize=(10, 8))
        im = plt.imshow(correlation_matrix, cmap='coolwarm', aspect='auto', vmin=-1, vmax=1)
        plt.xticks(range(len(economic_cols_for_corr)), economic_cols_for_corr, rotation=45, ha='right')
        plt.yticks(range(len(economic_cols_for_corr)), economic_cols_for_corr)
        plt.title('Matriz de Correlaci√≥n - Variables Econ√≥micas', fontweight='bold')
        
        # A√±adir valores de correlaci√≥n
        for i in range(len(economic_cols_for_corr)):
            for j in range(len(economic_cols_for_corr)):
                plt.text(j, i, f'{correlation_matrix.iloc[i, j]:.2f}',
                         ha="center", va="center", color="black", fontsize=8)
        
        # A√±adir barra de color
        cbar = plt.colorbar(im)
        cbar.set_label('Coeficiente de Correlaci√≥n')
        plt.tight_layout()
        plt.show()
        
        # Mostrar correlaciones m√°s fuertes
        print("\nCORRELACIONES M√ÅS SIGNIFICATIVAS:")
        corr_pairs = correlation_matrix.unstack().sort_values(key=abs, ascending=False)
        corr_pairs = corr_pairs[corr_pairs != 1.0]  # Eliminar autocorrelaciones
        for i, ((var1, var2), corr) in enumerate(corr_pairs.head(5).items()):
            print(f"{i+1}. {var1} - {var2}: {corr:.3f}")

# =============================================================================
# 5. AN√ÅLISIS DE CALIDAD DE DATOS Y SELECCI√ìN DE VARIABLES
# =============================================================================
print("\n\n5. AN√ÅLISIS DE CALIDAD DE DATOS")
print("-" * 30)

# 5.1. Calidad de datos por pa√≠s
if 'country_name' in df.columns:
    data_quality = df.groupby('country_name').agg({
        'GDP (Current USD)': ['count', lambda x: x.isnull().sum()],
        'Inflation (CPI %)': lambda x: x.isnull().sum(),
        'Unemployment Rate (%)': lambda x: x.isnull().sum()
    })
    
    data_quality.columns = ['Total_Records', 'GDP_Nulls', 'Inflation_Nulls', 'Unemployment_Nulls']
    data_quality['Data_Quality_Score'] = 100 - (
        (data_quality['GDP_Nulls'] + data_quality['Inflation_Nulls'] + data_quality['Unemployment_Nulls']) / 
        data_quality['Total_Records'] * 100
    )
    
    print("PA√çSES CON MEJOR CALIDAD DE DATOS:")
    top_quality = data_quality.nlargest(5, 'Data_Quality_Score')[['Total_Records', 'Data_Quality_Score']]
    print(top_quality)
    
    print("\nPA√çSES CON PEOR CALIDAD DE DATOS:")
    bottom_quality = data_quality.nsmallest(5, 'Data_Quality_Score')[['Total_Records', 'Data_Quality_Score']]
    print(bottom_quality)

# 5.2. Selecci√≥n de variables para an√°lisis futuro
print("\n\n6. SELECCI√ìN DE VARIABLES PARA AN√ÅLISIS FUTURO")
print("-" * 45)

print("VARIABLES PRINCIPALES SELECCIONADAS:")
print("1. GDP (Current USD) - Variable continua que representa el tama√±o econ√≥mico")
print("2. GDP Growth (% Annual) - Variable continua que mide el crecimiento econ√≥mico")

print("\nVARIABLES SECUNDARIAS SELECCIONADAS:")
print("1. Inflation (CPI %) - Variable continua que mide la estabilidad de precios")
print("2. Unemployment Rate (%) - Variable continua que refleja el mercado laboral")

print("\nJUSTIFICACI√ìN:")
print("- El PIB y su crecimiento son indicadores fundamentales del desempe√±o econ√≥mico")
print("- La inflaci√≥n y el desempleo son variables clave para pol√≠ticas econ√≥micas")
print("- Existen correlaciones interesantes entre estas variables seg√∫n el an√°lisis exploratorio")
print("- Estas variables permiten formular preguntas relevantes sobre desarrollo econ√≥mico")

# =============================================================================
# 6. FORMULACI√ìN DE PREGUNTA DE INVESTIGACI√ìN
# =============================================================================
print("\n\n7. PREGUNTA DE INVESTIGACI√ìN")
print("-" * 30)

print("¬øExiste una relaci√≥n significativa entre el crecimiento econ√≥mico (GDP Growth)")
print("y la tasa de desempleo, y c√≥mo esta relaci√≥n var√≠a entre pa√≠ses desarrollados")
print("y pa√≠ses en desarrollo?")

print("\nCARACTER√çSTICAS DE LA PREGUNTA:")
print("‚úÖ CLARA: Se especifican las variables y la poblaci√≥n de estudio")
print("‚úÖ ESPEC√çFICA: Examina una relaci√≥n particular entre variables econ√≥micas")
print("‚úÖ MEDIBLE: Las variables est√°n disponibles y son cuantificables")
print("‚úÖ ABORDABLE: Puede responderse con los datos disponibles")
print("‚úÖ RELEVANTE: Tiene implicaciones para pol√≠ticas econ√≥micas")
print("‚úÖ VERIFICABLE: Puede probarse mediante an√°lisis estad√≠stico")

print("\nVARIABLES INVOLUCRADAS:")
print("- Variable independiente: GDP Growth (% Annual)")
print("- Variable dependiente: Unemployment Rate (%)")
print("- Variable de agrupaci√≥n: Nivel de desarrollo (a definir por PIB per c√°pita)")

print("\nENFOQUE METODOL√ìGICO PREVISTO:")
print("- An√°lisis de correlaci√≥n y regresi√≥n")
print("- Pruebas de hip√≥tesis por grupos de pa√≠ses")
print("- An√°lisis de series de tiempo para tendencias")